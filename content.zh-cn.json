{"pages":[{"title":"关于我","text":"这里目前只有一份 草稿!","link":"/zh-cn/about/index.html"}],"posts":[{"title":"ppa/pip/anaconda/npm在中国大陆很慢怎么办？","text":"在中国大陆，如果不对系统做一些特殊设置，从外网获取资源会非常慢。 为什么 中国大陆存在防火长城(GFW)（Great Firewall - 百度百科）。因此，诸如dl.google.com这类资源就无法访问。 即使资源没有被GFW屏蔽，访问外国资源还存在带宽限制，这就意味着诸如Ubuntu PPA、PyPI、GitHub这类资源访问起来速度极慢。新闻一 新闻二 oh-my-tuna来自清华TUNA协会的一群可爱的人们给我们带来了神器：oh-my-tuna（又名：一键TUNA）。点击前面的链接，按照他们的方法去试试吧！ 目前，下列工具/软件/平台在使用oh-my-tuna后，会指向清华TUNA源： Anaconda Arch Linux Tex Live (by tlmgr) Debian GNU/Linux Homebrew PyPI Ubuntu Linux 这里是使用方法： 1234567wget https://tuna.moe/oh-my-tuna/oh-my-tuna.py# 仅供当前账户python oh-my-tuna.py# 供整个电脑的账户sudo python oh-my-tuna.py --global# 获取帮助信息python oh-my-tuna.py -h 还可以去看看这个项目的GitHub仓库。 最新消息： 因未获得授权，清华TUNA源目前无法提供Anaconda镜像源。 开源镜像国内的开源镜像站点会按照一定的频率从原始站点同步数据，然后将数据以更快的速度传递给你。因为这些站点位于国内，离你更近，且没有境外网带宽限制。 我最常用的开源镜像站点是清华TUNA，速度快，很稳定！ 现在我具体分析一些换镜像源的案例： Ubuntu镜像源这个是最简单的，直接在图形界面就可以设置，进入设置 - 软件与更新，一切搞定 或者，你可以更改/etc/apt/sources.list来换成国内的镜像源，点我看示例. PyPI(pip)镜像源中国大陆有PyPI镜像源，这里提供两个HTTPS镜像源推荐： 清华TUNA（我的最爱）： https://pypi.tuna.tsinghua.edu.cn/simple/ 阿里云： https://mirrors.aliyun.com/pypi/simple/ 暂时使用PyPI源如果只是想暂时使用PyPI源，在指令最后加上-i和镜像源地址即可。 1pip install numpy -i https://pypi.tuna.tsinghua.edu.cn/simple/ 持续使用PyPI源如果需要持续使用某个PyPI源, 需要在/etc/文件夹下（对整个系统），或在$VIRTUAL_ENV/文件夹下（对某个具体的virtualenv虚拟环境，这个文件夹是你想设置的virtualenv环境的根目录）新建或修改pip.conf文件，添加如下内容： 12[global]index-url = https://pypi.tuna.tsinghua.edu.cn/simple 对pip(&gt;=10.0.0)用户，有一种简单的设置方式： 1pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple 更新pip，可以用这种操作： 1pip install -i https://pypi.tuna.tsinghua.edu.cn/simple pip -U 如想了解pip.conf的更多信息，请查阅这里。 npm镜像我推荐淘宝NPM: https://registry.npm.taobao.org. 暂时使用npm源如果只是想暂时使用npm源，在指令最后加上–registry和镜像源地址即可。 1npm &lt;your command&gt; --registry https://registry.npm.taobao.org install express 持续使用npm源 设定npm源 1npm config set registry https://registry.npm.taobao.org 检查npm源 1npm config get registry 如果返回结果为https://registry.npm.taobao.org，我们就成功了！ 使用cnpmcnpm是一个定制化的npm客户端，非常适合中国大陆网络环境下的用户高速下载npm包。安装方式为： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 反向代理什么是反向代理？戳这里反向代理 - 维基百科、反向代理 - 百度百科。简单来说，应用反向代理，就是把源站点的域名部分改成反向代理的域名，这样访问这个站点的速度就会变快。目前我最喜欢的反向代理站是USTC LUG反向代理，这里是他们的GitHub用户组。 这里有一个简单的例子：如果你想安装/更新你的英伟达显卡驱动，常规做法是添加这个ppa库：http://ppa.launchpad.net/graphics-drivers/ppa/ubuntu，但是下载速度会很慢。如果我们把它改为https://launchpad.proxy.ustclug.org/graphics-drivers/ppa/ubuntu（注意：http需要改为https），下载速度就会显著提高。这个可以在Ubuntu的图形化界面的设置去修改，也可以在/etc/apt/sources.list.d/这个文件夹下修改对应的配置文件。 下面这个列表展示了USTC LUG目前提供的反向代理： 注意：务必使用https！ 源站点 反向代理站点 ppa.launchpad.net launchpad.proxy.ustclug.org packages.elastic.co elastic.proxy.ustclug.org archive.cloudera.com/cdh5/ cloudera.proxy.ustclug.org/cdh5/ downloads.lede-project.org lede.proxy.ustclug.org downloads.openwrt.org openwrt.mirrors.ustc.edu.cn registry-1.docker.io docker.mirrors.ustc.edu.cn registry.npmjs.org npmreg.mirrors.ustc.edu.cn www.npmjs.com npm.mirrors.ustc.edu.cn fonts.gstatic.com fonts-gstatic.lug.ustc.edu.cn fonts.googleapis.com onts.lug.ustc.edu.cn ajax.googleapis.com ajax.lug.ustc.edu.cn storage.googleapis.com storage-googleapis.lug.ustc.edu.cn themes.googleusercontent.com google-themes.lug.ustc.edu.cn gerrit.googlesource.com gerrit-googlesource.lug.ustc.edu.cn secure.gravatar.com gravatar.lug.ustc.edu.cn Bash代理如果系统的后台运行着HTTP/SOCKS 5代理，在~/.bashrc中添加如下语句，可以实现bash内的代理： 1234# 你也可以给下面的export语句添加一个alias，这样每次打开bash的时候可以自己决定开不开代理# 以下两个句子二选一即可export http_proxy='http://&lt;proxy server address (eg. localhost)&gt;:&lt;proxy server port (eg. 12333)&gt;'export http_proxy='socks5://&lt;proxy server address (eg. localhost)&gt;:&lt;proxy server port (eg. 1080)&gt;'","link":"/zh-cn/Download-Open-Source-Resources-Faster-in-Mainland-China/"},{"title":"你好 世界","text":"大家好！我正在用Hexo建立我的博客！这是我的第一篇博文。 这个站点目前还在建立的过程中，请期待美好的事情的发生吧！","link":"/zh-cn/hello-world/"}],"tags":[{"name":"Ubuntu","slug":"Ubuntu","link":"/zh-cn/tags/Ubuntu/"},{"name":"Linux","slug":"Linux","link":"/zh-cn/tags/Linux/"},{"name":"Python","slug":"Python","link":"/zh-cn/tags/Python/"},{"name":"node.js","slug":"node-js","link":"/zh-cn/tags/node-js/"},{"name":"ppa","slug":"ppa","link":"/zh-cn/tags/ppa/"},{"name":"教程","slug":"教程","link":"/zh-cn/tags/教程/"}],"categories":[{"name":"DevOps","slug":"DevOps","link":"/zh-cn/categories/DevOps/"},{"name":"Linux","slug":"DevOps/Linux","link":"/zh-cn/categories/DevOps/Linux/"}]}